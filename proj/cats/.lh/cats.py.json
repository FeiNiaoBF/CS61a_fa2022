{
    "sourceFile": "cats.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1716615365191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716615376653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,10 @@\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         words = split(paragraphs)\n         for word in words:\n-            if word in topic:\n-                return True\n+\n+                return Trueif word in topic:\n             return False\n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615382783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,10 @@\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         words = split(paragraphs)\n         for word in words:\n+            return True if word in topic:\n \n-                return Trueif word in topic:\n-            return False\n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615387934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         words = split(paragraphs)\n         for word in words:\n-            return True if word in topic:\n+            return True if word in topic else False\n \n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615427377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,9 @@\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n-        words = split(paragraphs)\n-        for word in words:\n-            return True if word in topic else False\n-\n+        \n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615446136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n-        \n+        words_\n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615453200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n-        words_\n+        words_paragraph = s\n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615459215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n-        words_paragraph = s\n+        words_paragraph = slice()\n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615473395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,10 @@\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n-        words_paragraph = slice()\n+    \n+\n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615492512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n-    \n+        for \n \n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615499067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n-        for \n+        for paragra\n \n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615505308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n-        for paragra\n+        for paragraph in \n \n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615528010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,10 @@\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n-        for paragraph in \n+        for paragraph in paragraphs:\n+            for word in \n \n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615536726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n-            for word in \n+            for word in split(r)\n \n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615542817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n-            for word in split(r)\n+            for word in split(remove_punctuation(lower))\n \n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615548290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,10 @@\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n-            for word in split(remove_punctuation(lower))\n+            for word in split(remove_punctuation(lower(paragraph)):\n+                              )\n \n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615562535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,11 @@\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n-            for word in split(remove_punctuation(lower(paragraph)):\n-                              )\n+            for word in split(remove_punctuation(lower(paragraph))):\n+                if word in topic:\n+                    return True \n \n     return select_about\n     # END PROBLEM 2\n \n"
                },
                {
                    "date": 1716615572106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,11 @@\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n             for word in split(remove_punctuation(lower(paragraph))):\n-                if word in topic:\n-                    return True \n+                return True if \n \n+\n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615577894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n             for word in split(remove_punctuation(lower(paragraph))):\n-                return True if \n+                return True if word in topic \n \n \n     return select_about\n     # END PROBLEM 2\n"
                },
                {
                    "date": 1716615586690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n             for word in split(remove_punctuation(lower(paragraph))):\n-                return True if word in topic \n+                return True if word in topic else False\n \n \n     return select_about\n     # END PROBLEM 2\n"
                },
                {
                    "date": 1716615636476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,8 @@\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n             for word in split(remove_punctuation(lower(paragraph))):\n                 return True if word in topic else False\n-\n-\n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615712204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n             for word in split(remove_punctuation(lower(paragraph))):\n-                return True if word in topic else False\n+                return True else False\n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615720486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,11 @@\n     # BEGIN PROBLEM 2\n     def select_about(paragraphs):\n         for paragraph in paragraphs:\n             for word in split(remove_punctuation(lower(paragraph))):\n-                return True else False\n+                if word in topic:\n+                return True\n+            return False\n     return select_about\n     # END PROBLEM 2\n \n \n"
                },
                {
                    "date": 1716615742008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,13 +49,12 @@\n     'Nice pup.'\n     \"\"\"\n     assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n     # BEGIN PROBLEM 2\n-    def select_about(paragraphs):\n-        for paragraph in paragraphs:\n+    def select_about(paragraph):\n             for word in split(remove_punctuation(lower(paragraph))):\n                 if word in topic:\n-                return True\n+                    return True\n             return False\n     return select_about\n     # END PROBLEM 2\n \n"
                }
            ],
            "date": 1716615365191,
            "name": "Commit-0",
            "content": "\"\"\"Typing test implementation\"\"\"\n\nfrom utils import lower, split, remove_punctuation, lines_from_file\nfrom ucb import main, interact, trace\nfrom datetime import datetime\n\n\n###########\n# Phase 1 #\n###########\n\n\ndef pick(paragraphs, select, k):\n    \"\"\"Return the Kth paragraph from PARAGRAPHS for which SELECT called on the\n    paragraph returns True. If there are fewer than K such paragraphs, return\n    the empty string.\n\n    Arguments:\n        paragraphs: a list of strings\n        select: a function that returns True for paragraphs that can be selected\n        k: an integer\n\n    >>> ps = ['hi', 'how are you', 'fine']\n    >>> s = lambda p: len(p) <= 4\n    >>> pick(ps, s, 0)\n    'hi'\n    >>> pick(ps, s, 1)\n    'fine'\n    >>> pick(ps, s, 2)\n    ''\n    \"\"\"\n    # BEGIN PROBLEM 1\n    select_arr = [word for word in paragraphs if select(word)]\n    return select_arr[k] if k < len(select_arr) else ''\n    # END PROBLEM 1\n\n\ndef about(topic):\n    \"\"\"Return a select function that returns whether\n    a paragraph contains one of the words in TOPIC.\n\n    Arguments:\n        topic: a list of words related to a subject\n\n    >>> about_dogs = about(['dog', 'dogs', 'pup', 'puppy'])\n    >>> pick(['Cute Dog!', 'That is a cat.', 'Nice pup!'], about_dogs, 0)\n    'Cute Dog!'\n    >>> pick(['Cute Dog!', 'That is a cat.', 'Nice pup.'], about_dogs, 1)\n    'Nice pup.'\n    \"\"\"\n    assert all([lower(x) == x for x in topic]), 'topics should be lowercase.'\n    # BEGIN PROBLEM 2\n    def select_about(paragraphs):\n        words = split(paragraphs)\n        for word in words:\n            if word in topic:\n                return True\n            return False\n    return select_about\n    # END PROBLEM 2\n\n\ndef accuracy(typed, source):\n    \"\"\"Return the accuracy (percentage of words typed correctly) of TYPED\n    when compared to the prefix of SOURCE that was typed.\n\n    Arguments:\n        typed: a string that may contain typos\n        source: a string without errors\n\n    >>> accuracy('Cute Dog!', 'Cute Dog.')\n    50.0\n    >>> accuracy('A Cute Dog!', 'Cute Dog.')\n    0.0\n    >>> accuracy('cute Dog.', 'Cute Dog.')\n    50.0\n    >>> accuracy('Cute Dog. I say!', 'Cute Dog.')\n    50.0\n    >>> accuracy('Cute', 'Cute Dog.')\n    100.0\n    >>> accuracy('', 'Cute Dog.')\n    0.0\n    >>> accuracy('', '')\n    100.0\n    \"\"\"\n    typed_words = split(typed)\n    source_words = split(source)\n    # BEGIN PROBLEM 3\n    \"*** YOUR CODE HERE ***\"\n    # END PROBLEM 3\n\n\ndef wpm(typed, elapsed):\n    \"\"\"Return the words-per-minute (WPM) of the TYPED string.\n\n    Arguments:\n        typed: an entered string\n        elapsed: an amount of time in seconds\n\n    >>> wpm('hello friend hello buddy hello', 15)\n    24.0\n    >>> wpm('0123456789',60)\n    2.0\n    \"\"\"\n    assert elapsed > 0, 'Elapsed time must be positive'\n    # BEGIN PROBLEM 4\n    \"*** YOUR CODE HERE ***\"\n    # END PROBLEM 4\n\n\n###########\n# Phase 2 #\n###########\n\ndef autocorrect(typed_word, word_list, diff_function, limit):\n    \"\"\"Returns the element of WORD_LIST that has the smallest difference\n    from TYPED_WORD. Instead returns TYPED_WORD if that difference is greater\n    than LIMIT.\n\n    Arguments:\n        typed_word: a string representing a word that may contain typos\n        word_list: a list of strings representing source words\n        diff_function: a function quantifying the difference between two words\n        limit: a number\n\n    >>> ten_diff = lambda w1, w2, limit: 10 # Always returns 10\n    >>> autocorrect(\"hwllo\", [\"butter\", \"hello\", \"potato\"], ten_diff, 20)\n    'butter'\n    >>> first_diff = lambda w1, w2, limit: (1 if w1[0] != w2[0] else 0) # Checks for matching first char\n    >>> autocorrect(\"tosting\", [\"testing\", \"asking\", \"fasting\"], first_diff, 10)\n    'testing'\n    \"\"\"\n    # BEGIN PROBLEM 5\n    \"*** YOUR CODE HERE ***\"\n    # END PROBLEM 5\n\n\ndef feline_fixes(typed, source, limit):\n    \"\"\"A diff function for autocorrect that determines how many letters\n    in TYPED need to be substituted to create SOURCE, then adds the difference in\n    their lengths and returns the result.\n\n    Arguments:\n        typed: a starting word\n        source: a string representing a desired goal word\n        limit: a number representing an upper bound on the number of chars that must change\n\n    >>> big_limit = 10\n    >>> feline_fixes(\"nice\", \"rice\", big_limit)    # Substitute: n -> r\n    1\n    >>> feline_fixes(\"range\", \"rungs\", big_limit)  # Substitute: a -> u, e -> s\n    2\n    >>> feline_fixes(\"pill\", \"pillage\", big_limit) # Don't substitute anything, length difference of 3.\n    3\n    >>> feline_fixes(\"roses\", \"arose\", big_limit)  # Substitute: r -> a, o -> r, s -> o, e -> s, s -> e\n    5\n    >>> feline_fixes(\"rose\", \"hello\", big_limit)   # Substitute: r->h, o->e, s->l, e->l, length difference of 1.\n    5\n    \"\"\"\n    # BEGIN PROBLEM 6\n    assert False, 'Remove this line'\n    # END PROBLEM 6\n\n\ndef minimum_mewtations(start, goal, limit):\n    \"\"\"A diff function that computes the edit distance from START to GOAL.\n    This function takes in a string START, a string GOAL, and a number LIMIT.\n    Arguments:\n        start: a starting word\n        goal: a goal word\n        limit: a number representing an upper bound on the number of edits\n    >>> big_limit = 10\n    >>> minimum_mewtations(\"cats\", \"scat\", big_limit)       # cats -> scats -> scat\n    2\n    >>> minimum_mewtations(\"purng\", \"purring\", big_limit)   # purng -> purrng -> purring\n    2\n    >>> minimum_mewtations(\"ckiteus\", \"kittens\", big_limit) # ckiteus -> kiteus -> kitteus -> kittens\n    3\n    \"\"\"\n    assert False, 'Remove this line'\n    if ______________:  # Fill in the condition\n        # BEGIN\n        \"*** YOUR CODE HERE ***\"\n        # END\n    elif ___________:  # Feel free to remove or add additional cases\n        # BEGIN\n        \"*** YOUR CODE HERE ***\"\n        # END\n    else:\n        add = ...  # Fill in these lines\n        remove = ...\n        substitute = ...\n        # BEGIN\n        \"*** YOUR CODE HERE ***\"\n        # END\n\n\ndef final_diff(typed, source, limit):\n    \"\"\"A diff function that takes in a string TYPED, a string SOURCE, and a number LIMIT.\n    If you implement this function, it will be used.\"\"\"\n    assert False, 'Remove this line to use your final_diff function.'\n\n\nFINAL_DIFF_LIMIT = 6  # REPLACE THIS WITH YOUR LIMIT\n\n\n###########\n# Phase 3 #\n###########\n\n\ndef report_progress(typed, prompt, user_id, upload):\n    \"\"\"Upload a report of your id and progress so far to the multiplayer server.\n    Returns the progress so far.\n\n    Arguments:\n        typed: a list of the words typed so far\n        prompt: a list of the words in the typing prompt\n        user_id: a number representing the id of the current user\n        upload: a function used to upload progress to the multiplayer server\n\n    >>> print_progress = lambda d: print('ID:', d['id'], 'Progress:', d['progress'])\n    >>> # The above function displays progress in the format ID: __, Progress: __\n    >>> print_progress({'id': 1, 'progress': 0.6})\n    ID: 1 Progress: 0.6\n    >>> typed = ['how', 'are', 'you']\n    >>> prompt = ['how', 'are', 'you', 'doing', 'today']\n    >>> report_progress(typed, prompt, 2, print_progress)\n    ID: 2 Progress: 0.6\n    0.6\n    >>> report_progress(['how', 'aree'], prompt, 3, print_progress)\n    ID: 3 Progress: 0.2\n    0.2\n    \"\"\"\n    # BEGIN PROBLEM 8\n    \"*** YOUR CODE HERE ***\"\n    # END PROBLEM 8\n\n\ndef time_per_word(words, times_per_player):\n    \"\"\"Given timing data, return a match dictionary, which contains a\n    list of words and the amount of time each player took to type each word.\n\n    Arguments:\n        words: a list of words, in the order they are typed.\n        times_per_player: A list of lists of timestamps including the time\n                          the player started typing, followed by the time\n                          the player finished typing each word.\n\n    >>> p = [[75, 81, 84, 90, 92], [19, 29, 35, 36, 38]]\n    >>> match = time_per_word(['collar', 'plush', 'blush', 'repute'], p)\n    >>> match[\"words\"]\n    ['collar', 'plush', 'blush', 'repute']\n    >>> match[\"times\"]\n    [[6, 3, 6, 2], [10, 6, 1, 2]]\n    \"\"\"\n    # BEGIN PROBLEM 9\n    \"*** YOUR CODE HERE ***\"\n    # END PROBLEM 9\n\n\ndef fastest_words(match):\n    \"\"\"Return a list of lists of which words each player typed fastest.\n\n    Arguments:\n        match: a match dictionary as returned by time_per_word.\n\n    >>> p0 = [5, 1, 3]\n    >>> p1 = [4, 1, 6]\n    >>> fastest_words(match(['Just', 'have', 'fun'], [p0, p1]))\n    [['have', 'fun'], ['Just']]\n    >>> p0  # input lists should not be mutated\n    [5, 1, 3]\n    >>> p1\n    [4, 1, 6]\n    \"\"\"\n    player_indices = range(len(get_all_times(match)))  # contains an *index* for each player\n    word_indices = range(len(get_all_words(match)))    # contains an *index* for each word\n    # BEGIN PROBLEM 10\n    \"*** YOUR CODE HERE ***\"\n    # END PROBLEM 10\n\n\ndef match(words, times):\n    \"\"\"A dictionary containing all words typed and their times.\n\n    Arguments:\n        words: A list of strings, each string representing a word typed.\n        times: A list of lists for how long it took for each player to type\n            each word.\n            times[i][j] = time it took for player i to type words[j].\n\n    Example input:\n        words: ['Hello', 'world']\n        times: [[5, 1], [4, 2]]\n    \"\"\"\n    assert all([type(w) == str for w in words]), 'words should be a list of strings'\n    assert all([type(t) == list for t in times]), 'times should be a list of lists'\n    assert all([isinstance(i, (int, float)) for t in times for i in t]), 'times lists should contain numbers'\n    assert all([len(t) == len(words) for t in times]), 'There should be one word per time.'\n    return {\"words\": words, \"times\": times}\n\n\ndef get_word(match, word_index):\n    \"\"\"A utility function that gets the word with index word_index\"\"\"\n    assert 0 <= word_index < len(match[\"words\"]), \"word_index out of range of words\"\n    return match[\"words\"][word_index]\n\n\ndef time(match, player_num, word_index):\n    \"\"\"A utility function for the time it took player_num to type the word at word_index\"\"\"\n    assert word_index < len(match[\"words\"]), \"word_index out of range of words\"\n    assert player_num < len(match[\"times\"]), \"player_num out of range of players\"\n    return match[\"times\"][player_num][word_index]\n\n\ndef get_all_words(match):\n    \"\"\"A selector function for all the words in the match\"\"\"\n    return match[\"words\"]\n\n\ndef get_all_times(match):\n    \"\"\"A selector function for all typing times for all players\"\"\"\n    return match[\"times\"]\n\n\ndef match_string(match):\n    \"\"\"A helper function that takes in a match dictionary and returns a string representation of it\"\"\"\n    return f\"match({match['words']}, {match['times']})\"\n\n\nenable_multiplayer = False  # Change to True when you're ready to race.\n\n##########################\n# Command Line Interface #\n##########################\n\n\ndef run_typing_test(topics):\n    \"\"\"Measure typing speed and accuracy on the command line.\"\"\"\n    paragraphs = lines_from_file('data/sample_paragraphs.txt')\n    select = lambda p: True\n    if topics:\n        select = about(topics)\n    i = 0\n    while True:\n        source = pick(paragraphs, select, i)\n        if not source:\n            print('No more paragraphs about', topics, 'are available.')\n            return\n        print('Type the following paragraph and then press enter/return.')\n        print('If you only type part of it, you will be scored only on that part.\\n')\n        print(source)\n        print()\n\n        start = datetime.now()\n        typed = input()\n        if not typed:\n            print('Goodbye.')\n            return\n        print()\n\n        elapsed = (datetime.now() - start).total_seconds()\n        print(\"Nice work!\")\n        print('Words per minute:', wpm(typed, elapsed))\n        print('Accuracy:        ', accuracy(typed, source))\n\n        print('\\nPress enter/return for the next paragraph or type q to quit.')\n        if input().strip() == 'q':\n            return\n        i += 1\n\n\n@main\ndef run(*args):\n    \"\"\"Read in the command-line argument and calls corresponding functions.\"\"\"\n    import argparse\n    parser = argparse.ArgumentParser(description=\"Typing Test\")\n    parser.add_argument('topic', help=\"Topic word\", nargs='*')\n    parser.add_argument('-t', help=\"Run typing test\", action='store_true')\n\n    args = parser.parse_args()\n    if args.t:\n        run_typing_test(args.topic)\n"
        }
    ]
}