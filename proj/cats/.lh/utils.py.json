{
    "sourceFile": "utils.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1716611471959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716611477400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n # Keyboard layout functions #\n #############################\n \n \n-qwKEY_LAYOUT = [[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"-\", \"=\"],\n+KEY_LAYOUT = [[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"-\", \"=\"],\n               [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"[\", \"]\"],\n               [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\"],\n               [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"],\n               [\" \"]]\n"
                }
            ],
            "date": 1716611471959,
            "name": "Commit-0",
            "content": "\"Utility functions for file and string manipulation\"\n\nimport string\nfrom math import sqrt\n\n############################\n# String utility functions #\n############################\n\n\ndef lines_from_file(path):\n    \"\"\"Return a list of strings, one for each line in a file.\"\"\"\n    with open(path, 'r') as f:\n        return [line.strip() for line in f.readlines()]\n\n\ndef remove_punctuation(s):\n    \"\"\"Return a string with the same contents as s, but with punctuation removed.\n\n    >>> remove_punctuation(\"It's a lovely day, don't you think?\")\n    'Its a lovely day dont you think'\n    >>> remove_punctuation(\"Its a lovely day dont you think\")\n    'Its a lovely day dont you think'\n    \"\"\"\n    punctuation_remover = str.maketrans('', '', string.punctuation)\n    return s.strip().translate(punctuation_remover)\n\n\ndef lower(s):\n    \"\"\"Return a lowercased version of s.\n\n    >>> lower(\"HELLO\")\n    'hello'\n    >>> lower(\"World\")\n    'world'\n    >>> lower(\"hello WORLD\")\n    'hello world'\n    \"\"\"\n    return s.lower()\n\n\ndef split(s):\n    \"\"\"Return a list of words contained in s, which are sequences of characters\n    separated by whitespace (spaces, tabs, etc.).\n\n    >>> split(\"It's a lovely day, don't you think?\")\n    [\"It's\", 'a', 'lovely', 'day,', \"don't\", 'you', 'think?']\n    \"\"\"\n    return s.split()\n\n#############################\n# Keyboard layout functions #\n#############################\n\n\nqwKEY_LAYOUT = [[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"-\", \"=\"],\n              [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"[\", \"]\"],\n              [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\"],\n              [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"],\n              [\" \"]]\n\n\ndef distance(p1, p2):\n    \"\"\"Return the Euclidean distance between two points\n\n    The Euclidean distance between two points, (x1, y1) and (x2, y2)\n    is the square root of (x1 - x2) ** 2 + (y1 - y2) ** 2\n\n    >>> distance((0, 1), (1, 1))\n    1.0\n    >>> distance((1, 1), (1, 1))\n    0.0\n    >>> round(distance((4, 0), (0, 4)), 3)\n    5.657\n    \"\"\"\n    return sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\n\ndef get_key_distances():\n    \"\"\"Return a new dictionary mapping key pairs to distances.\n\n    Each key of the dictionary is a tuple of two\n    letters as strings, and each value is the euclidean distance\n    between the two letters on a standard QWERTY keyboard, normalized\n\n    The scaling is constant, so a pair of keys that are twice\n    as far have a distance value that is twice as great\n\n    >>> distances = get_key_distances()\n    >>> distances[\"a\", \"a\"]\n    0.0\n    >>> round(distances[\"a\", \"d\"],3)\n    1.367\n    >>> round(distances[\"d\", \"a\"],3)\n    1.367\n    \"\"\"\n    key_distance = {}\n\n    def compute_pairwise_distances(i, j, d):\n        for x in range(len(KEY_LAYOUT)):\n            for y in range(len(KEY_LAYOUT[x])):\n                l1 = KEY_LAYOUT[i][j]\n                l2 = KEY_LAYOUT[x][y]\n                d[l1, l2] = distance((i, j), (x, y))\n\n    for i in range(len(KEY_LAYOUT)):\n        for j in range(len(KEY_LAYOUT[i])):\n            compute_pairwise_distances(i, j, key_distance)\n\n    max_value = max(key_distance.values())\n    return {key: value * 8 / max_value for key, value in key_distance.items()}\n\n\ndef count(f):\n    \"\"\"Keeps track of the number of times a function f is called using the\n    variable call_count\n\n    >>> def factorial(n):\n    ...     if n <= 1:\n    ...         return 1\n    ...     return n * factorial(n - 1)\n    >>> factorial = count(factorial)\n    >>> factorial(5)\n    120\n    >>> factorial.call_count\n    5\n    \"\"\"\n    def counted(*args):\n        counted.call_count += 1\n        return f(*args)\n    counted.call_count = 0\n    return counted\n"
        }
    ]
}