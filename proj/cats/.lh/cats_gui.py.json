{
    "sourceFile": "cats_gui.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1716619440733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716619496303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import random\n import string\n \n import cats\n-from gui_files.common_server import Server, route, sendto, start\n+from gui_files.common_server import Server, route, sendto, start # type: ignore\n from multiplayer import multiplayer\n \n PORT = 31415\n DEFAULT_SERVER = \"https://cats.cs61a.org\"\n"
                },
                {
                    "date": 1716619501945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import string\n \n import cats\n from gui_files.common_server import Server, route, sendto, start # type: ignore\n-from multiplayer import multiplayer\n+from multiplayer import multiplayer # type: ignore\n \n PORT = 31415\n DEFAULT_SERVER = \"https://cats.cs61a.org\"\n GUI_FOLDER = \"gui_files/\"\n"
                },
                {
                    "date": 1716619510853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n import random\n import string\n \n import cats\n-from gui_files.common_server import Server, route, sendto, start # type: ignore\n-from multiplayer import multiplayer # type: ignore\n+from gui_files.common_server import Server, route, sendto, start\n+from multiplayer import multiplayer\n \n PORT = 31415\n DEFAULT_SERVER = \"https://cats.cs61a.org\"\n GUI_FOLDER = \"gui_files/\"\n"
                }
            ],
            "date": 1716619440733,
            "name": "Commit-0",
            "content": "\"\"\"Web server for the typing GUI.\"\"\"\nimport base64\nimport os\nimport random\nimport string\n\nimport cats\nfrom gui_files.common_server import Server, route, sendto, start\nfrom multiplayer import multiplayer\n\nPORT = 31415\nDEFAULT_SERVER = \"https://cats.cs61a.org\"\nGUI_FOLDER = \"gui_files/\"\nPARAGRAPH_PATH = \"./data/sample_paragraphs.txt\"\nWORDS_LIST = cats.lines_from_file(\"data/words.txt\")\nWORDS_SET = set(WORDS_LIST)\nLETTER_SETS = [(w, set(w)) for w in WORDS_LIST]\nSIMILARITY_LIMIT = 2\n\n\n@route\ndef request_paragraph(topics=None):\n    \"\"\"Return a random paragraph.\"\"\"\n    paragraphs = cats.lines_from_file(PARAGRAPH_PATH)\n    random.shuffle(paragraphs)\n    select = cats.about(topics) if topics else lambda x: True\n    return cats.pick(paragraphs, select, 0)\n\n\n@route\ndef analyze(prompted_text, typed_text, start_time, end_time):\n    \"\"\"Return [wpm, accuracy].\"\"\"\n    return {\n        \"wpm\": cats.wpm(typed_text, end_time - start_time),\n        \"accuracy\": cats.accuracy(typed_text, prompted_text),\n    }\n\n\ndef similar(w, v, n):\n    \"\"\"Whether W intersect V contains at least |W|-N and |V|-N elements.\"\"\"\n    intersect = len(w.intersection(v))\n    return intersect >= len(w) - n and intersect >= len(v) - n\n\n\n@route\ndef autocorrect(word=\"\"):\n    \"\"\"Call autocorrect using the best score function available.\"\"\"\n    raw_word = word\n    word = cats.lower(cats.remove_punctuation(raw_word))\n    if word in WORDS_SET or word == \"\":\n        return raw_word\n\n    # Heuristically choose candidate words to score.\n    letters = set(word)\n    candidates = [w for w, s in LETTER_SETS if similar(s, letters, SIMILARITY_LIMIT)]\n\n    # Try various diff functions until one doesn't raise an exception.\n    for fn in [cats.final_diff, cats.minimum_mewtations, cats.feline_fixes]:\n        try:\n            guess = cats.autocorrect(word, candidates, fn, SIMILARITY_LIMIT)\n            return reformat(guess, raw_word)\n        except BaseException:\n            pass\n\n    return raw_word\n\n\ndef reformat(word, raw_word):\n    \"\"\"Reformat WORD to match the capitalization and punctuation of RAW_WORD.\"\"\"\n    # handle capitalization\n    if raw_word != \"\" and raw_word[0].isupper():\n        word = word.capitalize()\n\n    # find the boundaries of the raw word\n    first = 0\n    while first < len(raw_word) and raw_word[first] in string.punctuation:\n        first += 1\n    last = len(raw_word) - 1\n    while last > first and raw_word[last] in string.punctuation:\n        last -= 1\n\n    # add wrapping punctuation to the word\n    if raw_word != word:\n        word = raw_word[:first] + word\n        word = word + raw_word[last + 1:]\n\n    return word\n\n\n###############\n# Multiplayer #\n###############\n\n\n@route\ndef request_id():\n    if not cats.enable_multiplayer:\n        return\n    return Server.provide_id()\n\n\n@route\ndef report_progress(id, typed, prompt):\n    \"\"\"Report progress to the multiplayer server and also return it.\"\"\"\n    typed = typed.split()  # A list of word strings\n    prompt = prompt.split()  # A list of word strings\n\n    return cats.report_progress(typed, prompt, id, sendto(Server.set_progress))\n\n\n@route\ndef fastest_words(prompt, targets):\n    \"\"\"Return a list of word_speed values describing the match.\"\"\"\n    words = prompt.split()\n    progress = Server.request_all_progress(targets=targets)\n    start_times = [p[0][1] for p in progress]\n    times_per_player = [[p[1] - s for p in ps] for s, ps in zip(start_times, progress)]\n    match = cats.time_per_word(words, times_per_player)\n    return cats.fastest_words(match)\n\n\nmultiplayer.create_multiplayer_server()\n\n###############\n# Favicons #\n###############\n\n\n@route\n@route(\"favicon.ico\")\ndef favicon():\n    favicon_folder = \"favicons\"\n    favicons = os.listdir(favicon_folder)\n    path = os.path.join(favicon_folder, random.choice(favicons))\n    with open(path, \"rb\") as f:\n        data = f.read()\n    image_b64 = base64.b64encode(data).decode(\"utf-8\")\n    return \"data:image/png;base64,\" + image_b64\n\n\nif __name__ == \"__main__\" or os.environ.get(\"ENV\") == \"prod\":\n    app = start(PORT, DEFAULT_SERVER, GUI_FOLDER, multiplayer.db_init)\n"
        }
    ]
}